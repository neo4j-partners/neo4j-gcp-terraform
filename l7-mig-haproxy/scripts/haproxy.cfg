global
    log         /dev/log local0

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     20000
    nbthread    2
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

defaults
    #mode                    http
    log                     global
    #option                  httplog
    #option                  dontlognull
    #option http-server-close
    #option forwardfor       except 127.0.0.0/8
    #option                  redispatch
    #retries                 3
    #timeout http-request    10s
    #timeout queue           1m
    timeout connect         5s
    timeout client          10m
    timeout server          10m
    timeout tunnel          60m
    #timeout http-keep-alive 10s
    #timeout check           10s
    #maxconn                 3000

frontend http-in
    bind :8080
    # we need to play some games here...first set an inspection delay and then
    # try an inspection to see we have content. this is a trick to make the 
    # client "speak" first and helps ensure we have enough data for protocol
    # detection (i.e. check if it's HTTP traffic and has HTTP headers)
    tcp-request inspect-delay 20s
    acl content_present req_len gt 0
    tcp-request content accept if content_present

    # peek to see if it's resembling HTTP...if not, probably plain bolt w/o wss
    use_backend neo4j-bolt if !HTTP
    # peek at any potential http headers seeing we have a websocket upgrade
    use_backend neo4j-bolt if { hdr(upgrade) -i -m str "websocket" }

    default_backend neo4j-http

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend neo4j-http
    mode http
    option forwardfor
    option httpchk
    #balance     roundrobin
    # default neo4j browser interface :7474
    server neo4j-browser 127.0.0.1:7474 maxconn 10000

backend neo4j-bolt
    # default bolt interface :7687, need to look into tuning 
    server neo4j-bolt 127.0.0.1:7687 maxconn 20000
