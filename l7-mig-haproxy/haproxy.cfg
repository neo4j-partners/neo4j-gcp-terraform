#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    #log         127.0.0.1 local2
    log         /dev/log local0

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     20000
    nbthread    2
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend http-in
    bind *:80
    # we need to play some games here...first set an inspection delay and then
	# try an inspection to see we have content. this is a trick to make the 
	# client "speak" first and helps ensure we have enough data for protocol
	# detection (i.e. check if it's HTTP traffic and has HTTP headers)
    tcp-request inspect-delay 20s
    acl content_present req_len gt 0
    tcp-request content accept if content_present

	# peek to see if it's resembling HTTP...if not, probably plain bolt w/o wss
    use_backend neo4j-bolt if !HTTP
	# peek at any potential http headers seeing we have a websocket upgrade
    use_backend neo4j-bolt if { hdr(upgrade) -i -m str "websocket" }

    default_backend             neo4j-http

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend neo4j-http
    mode http
    option forwardfor
    balance     roundrobin
    # default neo4j browser interface :7474
    server neo4j-browser 127.0.0.1:7474/browser maxconn 10000

backend neo4j-bolt
    # default bolt interface :7687, need to look into tuning 
    server neo4j-bolt 127.0.0.1:7687 maxconn 20000
